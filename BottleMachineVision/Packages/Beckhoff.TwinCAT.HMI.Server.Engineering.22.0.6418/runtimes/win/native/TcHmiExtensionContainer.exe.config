<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <appSettings>
    <!--The host name or IP addess on which the extension container should start. By default the extension container starts on the local IP address.-->
    <add key="HostNameOrAddress" value="localhost" />
    <!--The port number on which the extension container should start. Specify '0' to start on a randomly selected free port.-->
    <!--<add key="Port" value="0"/>-->
    <!--The timeout in milliseconds to wait for a WebSocket connection after the extension container has started. Specify '-1' to wait indefinitely.-->
    <add key="ConnectTimeout" value="10000" />
    <!--The path of the file that contains the certificate of the extension container (server). Specify this setting to secure the WebSocket connection using Secure Sockets Layer (SSL). If the file does not exist at the specified path, the extension container will create a new self-signed certificate.-->
    <!--<add key="ServerCertificate" value=""/>-->
    <!--The method that is used to validate the certificate of the client that connects to the extension container. The client validation methods are:
      - None: Cannot validate the client certificate.
      - AlwaysTrust: Always validate the client certificate.
      - Basic: Validate the client certificate if validation using basic validation policy succeeded.
      - Conditional: Validate the client certificate if no SSL policy errors are associated with it.
      - Default: Validate the client certificate if validation using basic validation policy succeeded and no SSL policy errors are associated with it.
      - Extended: Validate the client certificate if validation according to the default chain succeeded.
      - Full: Validate the client certificate if validation according to the default chain succeeded and no SSL policy errors are associated with it.
      - NeverTrust: Never validate the client certificate.-->
    <!--<add key="ClientCertificateValidation" value="None"/>-->
    <!--The path of the file that contains the JSON schema that is used to validate message.-->
    <!--<add key="JsonSchema" value=""/>-->
    <!--The messages that should be validated against the specified JSON schema. The JSON schema validation modes are:
      - None: No messages should be validated against the specified JSON schema.
      - Send: Messages to send should be validated agaist the specified JSON schema.
      - Receive: Received messages should be validated against the specified JSON schema.
      - Send, Receive: Messages to send and received messages should be validated agaist the specified JSON schema.-->
    <!--<add key="JsonSchemaValidation" value="None"/>-->
    <!--The size of the buffer in bytes when writing JSON.-->
    <!--<add key="BufferSize" value="1024"/>-->
    <!--The size of the receive buffer of the WebSocket connection in bytes. This value must not be less than 256 or greater than 65536 for TwinCAT HMI server extensions that use the .NET Framework.-->
    <!--<add key="ReceiveBufferSize" value="65536"/>-->
    <!--The timeout in milliseconds to wait for requests to complete. This value will be doubled when loading a TwinCAT HMI server extension that was built with the 'Debug' configuration. Specify '-1' to wait indefinitely.-->
    <!--<add key="RequestTimeout" value="10000"/>-->
    <!--The path of the file or directory where messages to send and received messages are logged. The following rules are applied to the specified path:
      - Environment variables in the path will be expanded and '$(AssemblyPath)' will be replaced with the name of the assembly that contains the TwinCAT HMI server extension to load.
      - Relative paths (which also includes an empty path) are interpreted with respect to the current working directory of the extension container which is equivalent to the working directory of the TwinCAT HMI server that started the extension container.
      - If the path has an extension, it is considered a file. Otherwise, it is considered a directory.
      - If a file is specified, it will be overwritten at startup.
      - If a directory is specified, each extension container will use a separate log file named according to the current date, time and process identifier.-->
    <!--<add key="LogPath" value=""/>-->
    <!--The maximum length of the messages that are logged. Specify a negative number to log the complete messages.
        Each log entry consists of the following components:
        - A timestamp that indicates when the log entry was created, for example: [01.01.2022 12:34:56.789]
        - An identifier that indicates which asynchronous operation was started or completed, for example: (START:    00000000)
        - An identifier that indicates what kind of operation was started or completed, for example: Constructor
        - A message that contains more detailed information about the operation, for example: Connected to: ws://127.0.0.1:56789

        A complete log entry then looks like the following, for example:
          [01.01.2022 12:34:56.789] (START:    00000000) Constructor:          Connected to: ws://127.0.0.1:56789

        While the first three components of log entries have a fixed length, the message part has a variable length that corresponds, for example, to the length of a sent or received message.
        The value specified here limits only the length of the message part of each log entry, while the other three components are always logged in full length, since they are elementary parts of each log entry.-->
    <!--<add key="LogMaxLength" value="-1"/>-->
    <!--The maximum number of the messages that are logged. Specify a negative number to log all messages.
        If a value greater than zero is specified here, the value of LogMaxLength must also be greater than or equal to zero.-->
    <!--<add key="LogMaxNumber" value="-1"/>-->
    <!--The mode that determines when messages to send and received messages are logged. The log modes are:
      - Immediately: Write messages immediately to the log file. This may reduce performance, but increases debugability.
      - Delayed: Write all messages to the log file when the extension container is shut down. This does not reduce perfomance, but the messages are only available after shutting down the extension container.-->
    <!--<add key="LogMode" value="Immediately"/>-->
    <!--Indicates whether a keep-alive mechanism should be used to check whether the WebSocket connection is alive.-->
    <!--<add key="UseKeepAlive" value="true"/>-->
    <!--The keep-alive interval of the WebSocket connection in milliseconds.-->
    <!--<add key="KeepAliveInterval" value="30000"/>-->
    <!--The keep-alive time of the WebSocket connection in milliseconds.-->
    <!--<add key="KeepAliveTime" value="10000"/>-->
    <!--A value that indicates whether to query the Global Assembly Cache (GAC) for unresolved assemblies. This option is effective only on Windows and if the .NET server extension targets .NET 5 or later.-->
    <!--<add key="AssemblyResolveGAC" value="false"/>-->
    <!--The timeout in milliseconds to wait for objects to be disposed to complete. This value will be doubled when loading a TwinCAT HMI server extension that was built with the 'Debug' configuration. Specify '-1' to wait indefinitely.-->
    <!--<add key="DisposeTimeout" value="10000"/>-->
  </appSettings>
  <runtime>
    <!-- Assembly binding redirection
    Modify the following lines if you need to load a custom version of an assembly in your TwinCAT HMI server extension. The new version of the assembly must be compatible with the version of the assembly that is referenced by your TwinCAT HMI server extension and used by the TcHmiExtensionContainer or TcHmiExtensionContainer.Core.
    Note that this application configuration file is used by all TcHmiExtensionContainer[.Core][(x86)] processes from the current directory. Therefore, all TwinCAT HMI server extensions loaded by this process must provide the specified version of the assembly whose version is redirected.-->
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="TcHmiSrvExtNet" publicKeyToken="180016cd49e5e8c3" culture="neutral" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="TcHmiSrvExtNet.Core" publicKeyToken="180016cd49e5e8c3" culture="neutral" />
        <bindingRedirect oldVersion="1.0.0.0-1.9.6418.0" newVersion="1.9.6418.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="TcHmiSrvExtNet.Core" publicKeyToken="180016cd49e5e8c3" culture="neutral" />
        <bindingRedirect oldVersion="2.0.0.0-2.2.6418.0" newVersion="2.2.6418.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="TcHmiSrvExtNet.Core" publicKeyToken="180016cd49e5e8c3" culture="neutral" />
        <bindingRedirect oldVersion="3.0.0.0-3.0.6418.0" newVersion="3.0.6418.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-65535.65535.65535.65535" newVersion="13.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.8" />
  </startup>
</configuration>